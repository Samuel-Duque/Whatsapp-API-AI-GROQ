const NodeCache = require('node-cache');
const whatsappService = require('./whatsappService');
const groqService = require('./groqService');

class ConversationService {
  constructor() {
    // Cache para armazenar hist√≥ricos de conversa (TTL em segundos: 30 minutos)
    this.conversationCache = new NodeCache({ stdTTL: 3600, checkperiod: 600 });
    this.maxMessages = 10;
    
    // Mensagem de boas-vindas para novos usu√°rios
    this.welcomeMessage = `‚ú® *Bem-vindo ao InfoCidad√£o* ‚ú®

üèôÔ∏è Sua ponte digital com a cidade do Recife! Estamos entusiasmados em t√™-lo conosco nesta jornada de cidadania ativa e informada.

üß≠ *O que fazemos:*
Fornecemos informa√ß√µes em tempo real sobre locais espec√≠ficos da nossa cidade. Ao chegar em pontos de interesse, voc√™ receber√° automaticamente dados relevantes sobre o local, servi√ßos dispon√≠veis, hist√≥ria e eventos.

üîî *Recursos principais:*
‚Ä¢ Notifica√ß√µes baseadas em localiza√ß√£o
‚Ä¢ Informa√ß√µes sobre servi√ßos p√∫blicos pr√≥ximos
‚Ä¢ Dados hist√≥ricos e culturais dos espa√ßos
‚Ä¢ Eventos e atividades na sua regi√£o
‚Ä¢ Canais diretos para servi√ßos municipais

ü§ù Esta √© uma iniciativa da Prefeitura do Recife em parceria com a tecnologia para construir uma cidade mais conectada e cidad√£os mais informados.

üí° *Como come√ßar:* Compartilhe sua localiza√ß√£o ou digite o nome do local sobre o qual deseja obter informa√ß√µes.

Estamos aqui para tornar sua experi√™ncia na cidade mais rica e conectada! üåÜ`;
    
    // Template padr√£o para fallback (usado quando necess√°rio iniciar conversas ap√≥s 24h)
    this.defaultTemplate = 'hello_world';
    
    // Servi√ßo de IA Groq para processamento de linguagem natural
    this.groqService = groqService;
  }

  /**
   * Obt√©m o hist√≥rico de conversas para um determinado usu√°rio
   * @param {string} userId - ID √∫nico do usu√°rio (n√∫mero de telefone)
   * @returns {Array} - Array com hist√≥rico de mensagens
   */
  getConversationHistory(userId) {
    return this.conversationCache.get(userId) || [];
  }

  /**
   * Adiciona uma mensagem ao hist√≥rico de conversas
   * @param {string} userId - ID √∫nico do usu√°rio (n√∫mero de telefone)
   * @param {Object} message - Objeto da mensagem {role: 'user'|'assistant', content: string}
   */
  addToConversationHistory(userId, message) {
    const history = this.getConversationHistory(userId);
    history.push(message);
    
    // Limitar hist√≥rico para as √∫ltimas 20 mensagens para evitar consumo excessivo de tokens
    const limitedHistory = history.slice(-20);
    
    this.conversationCache.set(userId, limitedHistory);
    return limitedHistory;
  }

  /**
   * Processa uma mensagem recebida e envia a resposta para o WhatsApp
   * @param {Object} message - Mensagem recebida
   * @returns {Promise<Object>} - Resultado do processamento
   */
  async processIncomingMessage(message) {
    try {
      const userId = message.from;
      const messageText = message.text;
      
      console.log(`üì• Processando mensagem de ${userId}: "${messageText}"`);
      
      // Adicionar mensagem do usu√°rio ao hist√≥rico
      const history = this.addToConversationHistory(userId, {
        role: 'user',
        content: messageText
      });
      
      // Obter resposta da IA
      const aiResponse = await groqService.getCompletion(messageText, history);
      
      if (!aiResponse.success) {
        throw new Error(`Falha ao obter resposta da IA: ${aiResponse.error}`);
      }
      
      console.log(`ü§ñ Resposta da IA: "${aiResponse.message}"`);
      
      // Adicionar resposta da IA ao hist√≥rico
      this.addToConversationHistory(userId, aiResponse.aiMessage);
      
      // Enviar resposta para o WhatsApp com fallback para template
      const result = await whatsappService.sendMessageWithFallback(
        userId, 
        aiResponse.message,
        this.defaultTemplate
      );
      
      if (!result.success) {
        throw new Error(`Falha ao enviar mensagem para o WhatsApp: ${result.error}`);
      }
      
      return {
        success: true,
        message: 'Mensagem processada e resposta enviada com sucesso',
        aiResponse: aiResponse.message
      };
    } catch (error) {
      console.error('Erro ao processar mensagem:', error);
      
      // Tentar enviar mensagem de erro para o usu√°rio
      try {
        await whatsappService.sendMessageWithFallback(
          message.from,
          'Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde.',
          this.defaultTemplate
        );
      } catch (sendError) {
        console.error('Erro ao enviar mensagem de erro:', sendError);
      }
      
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Envia uma mensagem de boas-vindas para um novo usu√°rio
   * @param {string} userId - ID do usu√°rio (n√∫mero de telefone)
   */
  async sendWelcomeMessage(userId) {
    try {
      // Tenta enviar como mensagem normal com fallback para template
      const result = await whatsappService.sendMessageWithFallback(
        userId, 
        this.welcomeMessage,
        this.defaultTemplate
      );
      
      if (result.success) {
        // Adicionar mensagem ao hist√≥rico
        this.addToConversationHistory(userId, {
          role: 'assistant',
          content: this.welcomeMessage
        });
      }
      
      return result;
    } catch (error) {
      console.error('Erro ao enviar mensagem de boas-vindas:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * Limpa o hist√≥rico de conversas de um usu√°rio
   * @param {string} userId - ID do usu√°rio
   * @returns {boolean} - Indica se a opera√ß√£o foi bem-sucedida
   */
  clearConversationHistory(userId) {
    return this.conversationCache.del(userId);
  }
}

module.exports = new ConversationService(); 